<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- enable Method level [vs URL level] authorization This work for ROOT 
		WEB APPLICATION Level scanned components Does NOT recognize WEB Application 
		level components - for THAT need to place enable line in Dispatcher-servlet -->
	<security:global-method-security pre-post-annotations="enabled" />

	<security:http pattern="/resources/**" security="none" />
	
	<security:http pattern="/login" security="none" />
	<security:http pattern="/home" security="none" />
	

	<!-- security:http enables security filter mechanism...name space configuration 
		is activated -->
	<!-- use-expressions enables URL level authorization - allows SPEL syntax -->
	
	
	    <security:http use-expressions="true">
		<security:csrf disabled="true"/>
		
		
		
		<security:intercept-url pattern="/*" access="hasAnyRole('ROLE_ANONYMOUS', 'ROLE_ADMIN')" />
		<security:intercept-url pattern="/home" access="hasAnyRole('ROLE_ANONYMOUS', 'ROLE_ADMIN')" />
		<security:intercept-url pattern="/register" access="hasRole('ROLE_ADMIN')" />
		<security:intercept-url pattern="/users" access="hasAnyRole('ROLE_ADMIN','ROLE_USER')" />
		<security:intercept-url pattern="/rest/*" access="hasRole('ROLE_ADMIN')" />
		
		
		<security:form-login login-page="/login"
			login-processing-url="/postLogin" username-parameter="username"
			password-parameter="password" default-target-url="/home"
			always-use-default-target="true" authentication-failure-url="/loginfailed" />
		<!-- -->

		<!-- BY DEFAULT the URL /j_spring_security_logout triggers logout logout-url= 
			"/doLogout" REPLACES it NOTE: is it JUST a URL naming convention - no mapping 
			occurs -->
		<security:logout logout-success-url="/logout"
			delete-cookies="JSESSIONID" logout-url="/doLogout" />
			
			
		<security:logout logout-url="/doLogout"
			logout-success-url="/logoutSuccess"
			delete-cookies="JSESSIONID"  />

	</security:http>

	<security:authentication-manager>
		<security:authentication-provider>
			<security:password-encoder hash="bcrypt" />
			<security:jdbc-user-service
				data-source-ref="dataSource"
				users-by-username-query="select username,password,enabled from user where username=?"
				authorities-by-username-query="select u1.username, u2.authority role from user u1, authorities u2 where u1.userId = u2.userId and u1.username =?" />
		</security:authentication-provider>
	</security:authentication-manager>

</beans>
